version: '3.9'
services:
  server:
#    image: cr.yandex/crp4qt6l07lpv7i3k7ir/itbooks:server
    build: ./packages/server
    container_name: server
    command: npm run start
    restart: unless-stopped
    environment:
      - PORT=5001
      - USER=wiseadme
      - MONGO_URI=mongodb://mongo1,mongo2,mongo3:27017/commerce
      - ACCESS_TOKEN_SECRET_KEY=menesilazerbaijanliyam
      - REFRESH_TOKEN_SECRET_KEY=esilsozmenasibudur
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - UPLOADS_DIR=/home/${USER}/www/uploads
    volumes:
      - uploads:/home/${USER}/www/uploads/
    depends_on:
      - redis
      - mongo-setup
    networks:
      - ecommerce
      - mongoNet
      - redis-net

  redis:
    image: redis:alpine
    #    volumes:
    #      - ./redis.conf:/usr/local/etc/redis/redis.conf
    #    container_name: redis-server
    #    hostname: redis-db
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    command: [ "redis-server", "--bind", "0.0.0.0", "--port", "6379", "--protected-mode", "no" ]
    container_name: redis
    networks:
      - redis-net
  #    environment:
  #       - REDIS_REPLICATION_MODE=master

  mongo1:
    image: mongo:5.0.14
    container_name: mongo1
    volumes:
      - mongo_primary:/data/db
    networks:
      - mongoNet
    command: mongod --replSet my-mongo-set

  mongo2:
    image: mongo:5.0.14
    container_name: mongo2
    volumes:
      - mongo_secondary:/data/db
    networks:
      - mongoNet
    depends_on:
      - mongo1
    command: mongod --replSet my-mongo-set

  mongo3:
    image: mongo:5.0.14
    container_name: mongo3
    volumes:
      - mongo_seed:/data/db
    networks:
      - mongoNet
    depends_on:
      - mongo1
      - mongo2
    command: mongod --replSet my-mongo-set

  mongo-setup:
    image: mongo:5.0.14
    restart: "no"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    volumes:
      - ./scripts/mongosetup.sh:/scripts/mongosetup.sh
    entrypoint: [ "bash", "/scripts/mongosetup.sh" ]
    networks:
      - mongoNet

  admin:
#    image: cr.yandex/crp4qt6l07lpv7i3k7ir/itbooks:admin
    build: ./packages/admin
    container_name: admin
    command: nginx -g "daemon off;"
    restart: unless-stopped
    depends_on:
      - server
    networks:
      - ecommerce

  shop:
    image: cr.yandex/crp4qt6l07lpv7i3k7ir/itbooks:shop
    container_name: shop-app
    restart: unless-stopped
    command: pm2-runtime ".output/server/index.mjs"
    #    volumes:
    #      - shop:/app
    depends_on:
      - server
    networks:
      - ecommerce

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    command: nginx -g "daemon off;"
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/nginx.shop.conf:/etc/nginx/conf.d/nginx.shop.conf
      - uploads:/var/lib/docker/volumes/proshop_uploads/_data
      #      - shop:/var/lib/docker/volumes/proshop_shop/_data/.output/public/_nuxt
      - cache:/usr/share/nginx/www
    depends_on:
      - admin
      - shop
      - server
    networks:
      - ecommerce

volumes:
  ecommerce:
  uploads:
  shop:
  cache:
  mongo_primary:
  mongo_secondary:
  mongo_seed:

networks:
  mongoNet:
    driver: bridge
  ecommerce:
    driver: bridge
  redis-net:
    driver: bridge
